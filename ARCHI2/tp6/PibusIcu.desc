//////////////////////////////////////////////////////////////////////////
// File : pibus_icu.h
// Author : A.Greiner 
// Date : 10/04/2010
// This program is released under the GNU Public License
// Copyright : UPMC-LIP6
////////////////////////////////////////////////////////////////////////////////////
// This component implements a vectorised interrupt controler and router,
// as a PIBUS target. It concentrates up to 32 input interrupt requests
// IRQ_IN[NIRQ] and controls up to 8 output interrupt signals IRQ_OUT[NPROC].
// The NIRQ parameter defines the number of input IRQs.
// The NPROC parameter defines the number of output IRQs.
// Each OUT_IRQ[i] is the logical OR of the 32 inputs IN_IRQ[k], with
// a specific 32 bits MASK[i] depending on the output IRQ.
// These 32 bits MASK registers allow the software to route the input IRQs
// to the proper output IRQ, i.e. to the proper processor. 
// IN_IRQ[i] is enabled when the corresponding mask bit is set to 1.
//
// This component takes 32 * NPROC bytes in the address space.
// and is seen as NPROC*5  memory mapped registers :
// - ICU_INT 	   	(0x00)	(Read-Only)   returns the the 32 input IRQs.
// - ICU_MASK 	  	(0x04)	(Read-Only)   returns the current mask value.
// - ICU_MASK_SET 	(0x08)	(Write-Only)  mask <= mask | wdata.
// - ICU_MASK_RESET	(0x0C)	(Write-Only)  mask <= mask & ~wdata.
// - ICU_IT_VECTOR	(0x10)	(Read-Only)   index of the smallest active IRQ.
// 	(if there is no active IRQ, the returned value is 32).
// 
// This component cheks address for segmentation violation,
// and can be used as a default target.
//////////////////////////////////////////////////////////////////////////////////
// This component has 5 "generator" parameters :
// - sc_module_name	name    : instance name
// - uint32_t		tgtid   : target index
// - pibusSegmentTable	segmap  : segment table
// - uint32_t		nirq	: number of input interrupt lines
// - uint32_t		nproc	: number of output interrupt lines (default = 1)
//////////////////////////////////////////////////////////////////////////////////

