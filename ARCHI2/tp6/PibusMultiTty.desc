/////////////////////////////////////////////////////////////////////
// File: pibus_multi_tty.h
// Authors : Alain Greiner 
// Date : 11/01/2010 
// This program is released under the GNU Public License
// Copyright : UPMC-LIP6
/////////////////////////////////////////////////////////////////////
// This component is a TTY controler. 
// It controls up to 16 terminals emulated as XTERM windows.
// Each terminal is acting  both as a character display
// and a keyboard controler.
//
//  Each terminal is seen as 4 memory mapped registers,
// - TTY_WRITE 	(0x0)	(write) character to display
// - TTY_STATUS (0x4)	(read)  bit0 : read buffer / bit1 : write buffer
// - TTY_READ   (0x8)	(read)  the key-board character 
// - TTY_CONFIG (0xc)	(write) unused 
//

// As a keyboard controler, it contains a TTY_READ register
// to store the character corresponding to the stroken key.
// Bit 0 of the TTY_STATUS register is 1 when TTY_READ is full. 
// It must be tested by the softwre before reading a character.
// If Bit 0 of TTY_STATUS register is 0, any read request
// in register TTY_READ will return an undefined value.
// If Bit 0 of TTY_STATUS register is 1, any new stroken key will be ignored.
// Bit 0 of TTY_STATUS is forced to 1 and the IRQ_GET line is activated
// when a key is stroken.
// Bit 0 of TTY_STATUS is forced to 0, and the IRQ_GET line is
// de-activated by a read request to the TTY_READ register.
// 
// As a display controler, it contains a TTY_WRITE register 
// to store the character that must be diplayed. 
// Bit 1 of the TTY_STATUS register is 1 when TTY_WRITE is full.
// In principle this bit must be tested before writing in TTY_WRITE register:
// If Bit 1 of TTY_STATUS register is 1, any write request to TTY_WRITE 
// register will be ignored.
// Bit 1 of TTY_STATUS  is forced to 1 and the IRQ_PUT line is 
// de-activated by a write request to the TTY_WRITE register.
// Bit 1 of TTY_STATUS is forced to 0, and the IRQ_PUT line is
// activated when the character is actually displayed.
//
// Implementation note : In the present implementation,
// the display buffer is supposed infinite. Therefore,
// the IRQ_PUT interrupt is not used, the Bit1 of TTY_STATUS
// is not used, and the associated flow-control mechanism.
//
// The constructor creates as many UNIX XTERM processes as
// the number of emulated terminals. It creates a PTY pseudo-terminal 
// for each XTERM supporting bi-directional inter-process communication.
/////////////////////////////////////////////////////////////////////
// This component has 4 "constructor" parameters :
// - sc_module_name	name		: instance name  
// - unsigned int	tgtid		: target index  
// - PibusSegmentTable  segtab		: segment table
// - unsigned int	ntty		: number of terminals
/////////////////////////////////////////////////////////////////////

